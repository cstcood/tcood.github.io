<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cstcood的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://f5h8hm.coding-pages.com/"/>
  <updated>2019-12-11T06:55:04.178Z</updated>
  <id>http://f5h8hm.coding-pages.com/</id>
  
  <author>
    <name>cstcood</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>文件操作</title>
    <link href="http://f5h8hm.coding-pages.com/category/%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    <id>http://f5h8hm.coding-pages.com/category/文件操作/</id>
    <published>2019-12-11T06:25:40.000Z</published>
    <updated>2019-12-11T06:55:04.178Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 11 2019 14:55:48 GMT+0800 (GMT+08:00) --><h2 id="相关函数引入"><a href="#相关函数引入" class="headerlink" title="相关函数引入"></a>相关函数引入</h2><h3 id="1-结构体句柄—-FILE结构体"><a href="#1-结构体句柄—-FILE结构体" class="headerlink" title="1,结构体句柄—-FILE结构体"></a>1,结构体句柄—-FILE结构体</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _FILE_DEFINED</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> _<span class="title">iobuf</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> *_ptr;</span><br><span class="line">    <span class="keyword">int</span> _cnt;</span><br><span class="line">    <span class="keyword">char</span> *_base;</span><br><span class="line">    <span class="keyword">int</span> _flag;<span class="comment">//文件状态标识</span></span><br><span class="line">    <span class="keyword">int</span> _file;</span><br><span class="line">    <span class="keyword">int</span> _charbuf;<span class="comment">//文字缓冲区</span></span><br><span class="line">    <span class="keyword">int</span> _bufsiz;<span class="comment">//缓冲区大小</span></span><br><span class="line">    <span class="keyword">char</span> *_tmpfname;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">iobuf</span> <span class="title">FILE</span>;</span></span><br></pre></td></tr></table></figure><h3 id="2-相关函数"><a href="#2-相关函数" class="headerlink" title="2,相关函数"></a>2,相关函数</h3><p>1.<code>fopen</code> 原型<code>FILE *__cdecl fopen(const char * __restrict__ _Filename,const char * __restrict__ _Mode) __MINGW_ATTRIB_DEPRECATED_SEC_WARN;</code>其中<code>__restrict__ _Filename</code>为文件路径地址（一般使用相对地址）<code>const char * __restrict__ _Mode) __MINGW_ATTRIB_DEPRECATED_SEC_WARN</code>为文件操作类型</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed Dec 11 2019 14:55:48 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;相关函数引入&quot;&gt;&lt;a href=&quot;#相关函数引入&quot; class=&quot;headerlink&quot; title=&quot;相关函数引入&quot;&gt;&lt;/a&gt;相关函
      
    
    </summary>
    
      <category term="c语言" scheme="http://f5h8hm.coding-pages.com/categories/c%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="c语言，文件操作" scheme="http://f5h8hm.coding-pages.com/tags/c%E8%AF%AD%E8%A8%80%EF%BC%8C%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>链表详解（二）</title>
    <link href="http://f5h8hm.coding-pages.com/category/%E9%93%BE%E8%A1%A8%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://f5h8hm.coding-pages.com/category/链表详解（二）/</id>
    <published>2019-12-05T06:09:16.000Z</published>
    <updated>2019-12-05T06:47:21.702Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 11 2019 14:55:48 GMT+0800 (GMT+08:00) --><h2 id="简化Josephus问题"><a href="#简化Josephus问题" class="headerlink" title="简化Josephus问题"></a>简化Josephus问题</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>有n个人围成一圈1，2报数，报到2的人出列开始下一轮，列出出列顺序</p><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p><code>input： n=4 output: 2,4,3</code></p><a id="more"></a><h3 id="解题实现"><a href="#解题实现" class="headerlink" title="解题实现"></a>解题实现</h3><p>当前题目为圆桌循环，因此选用循环链表，每个链表的节点的元素用ID<int>作为标序。所有的节点的元素ID可分为奇数和偶数二种情况即<code>id=2n-1</code>与<code>ID=2n</code>两种情况<br>当<code>id=2n-1</code>时输出下一个节点的元素的ID 即<code>2n</code> 当<code>ID=2n</code>时删除此节点的节点的元素返回下一个节点的元素的指针即<code>2n+1</code><br>结束条件：当删除节点最后只剩1时结束解题</int></p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">num</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ID;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">num</span>* <span class="title">next</span>;</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">struct num* <span class="title">deletelist</span><span class="params">(struct num *pre)</span><span class="comment">//通过第2n-1个节点指针删除第2n个节点 返回第2n+1个节点（结构体）指针</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">num</span> *<span class="title">p1</span>,*<span class="title">cur</span>,*<span class="title">curt</span>;</span></span><br><span class="line">p1=pre;<span class="comment">//第2n-1个节点</span></span><br><span class="line">cur=p1-&gt;next;<span class="comment">//第2n个节点</span></span><br><span class="line">p1-&gt;next= cur-&gt;next;<span class="comment">//第2n-1节点与第2n+1相连（断开第2n-1项与第2n项的连接）</span></span><br><span class="line">curt=cur-&gt;next;<span class="comment">//保存第2n+1节点的指针</span></span><br><span class="line"><span class="built_in">free</span>(cur);<span class="comment">//释放第2n节点内存空间</span></span><br><span class="line"><span class="keyword">return</span>(curt);<span class="comment">//返回第2n+1的指针</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(struct num *first)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">num</span> *<span class="title">p1</span>;</span></span><br><span class="line">p1=first;</span><br><span class="line"><span class="keyword">while</span>(p1-&gt;next!=p1)<span class="comment">//只剩一个节点就退出</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,p1-&gt;next-&gt;ID);<span class="comment">//输出第2n个节点的元素</span></span><br><span class="line">p1=deletelist(p1);<span class="comment">//删除第2n个节点返回2n+1个节点的指针</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">num</span> *<span class="title">first</span>,*<span class="title">p1</span>,*<span class="title">p2</span>;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)<span class="comment">//生成单向链表</span></span><br><span class="line">&#123;</span><br><span class="line">p1=(struct num*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct num));</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">1</span>) first=p1;<span class="comment">//记录初始（入口）节点的位置</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">p2-&gt;next=p1;<span class="comment">//连接节点</span></span><br><span class="line">&#125;</span><br><span class="line">p1-&gt;ID=i;<span class="comment">//ID赋值</span></span><br><span class="line">p2=p1;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">p1-&gt;next=first;<span class="comment">//尾节点指向首节点形成循环节点</span></span><br><span class="line">solve(first);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="相关链贴"><a href="#相关链贴" class="headerlink" title="相关链贴"></a>相关链贴</h2><p><a href="../链表详解  (一)">链表详解(一)</a><br><a href="../关于链表的学习">关于链表的学习</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Dec 11 2019 14:55:48 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;简化Josephus问题&quot;&gt;&lt;a href=&quot;#简化Josephus问题&quot; class=&quot;headerlink&quot; title=&quot;简化Josephus问题&quot;&gt;&lt;/a&gt;简化Josephus问题&lt;/h2&gt;&lt;h3 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h3&gt;&lt;p&gt;有n个人围成一圈1，2报数，报到2的人出列开始下一轮，列出出列顺序&lt;/p&gt;&lt;h3 id=&quot;举例&quot;&gt;&lt;a href=&quot;#举例&quot; class=&quot;headerlink&quot; title=&quot;举例&quot;&gt;&lt;/a&gt;举例&lt;/h3&gt;&lt;p&gt;&lt;code&gt;input： n=4 output: 2,4,3&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://f5h8hm.coding-pages.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="c语言" scheme="http://f5h8hm.coding-pages.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/c%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="c语言" scheme="http://f5h8hm.coding-pages.com/tags/c%E8%AF%AD%E8%A8%80/"/>
    
      <category term="链表" scheme="http://f5h8hm.coding-pages.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="数据结构" scheme="http://f5h8hm.coding-pages.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>链表详解 （一）</title>
    <link href="http://f5h8hm.coding-pages.com/category/%E9%93%BE%E8%A1%A8%E8%AF%A6%E8%A7%A3%20%20(%E4%B8%80)/"/>
    <id>http://f5h8hm.coding-pages.com/category/链表详解  (一)/</id>
    <published>2019-12-04T06:44:58.000Z</published>
    <updated>2019-12-05T06:47:23.697Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 11 2019 14:55:48 GMT+0800 (GMT+08:00) --><h2 id="框架详解"><a href="#框架详解" class="headerlink" title="框架详解"></a>框架详解</h2><h3 id="结构体初始化"><a href="#结构体初始化" class="headerlink" title="结构体初始化"></a>结构体初始化</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a;<span class="comment">//存储数据</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">data</span> *<span class="title">next</span>;</span><span class="comment">//存储下一个节点的地址</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">data</span> *<span class="title">preview</span>;</span><span class="comment">//存储上一个节点的地址</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>初始化<code>data</code>结构体 <code>data *next</code>存储下一个结构体函数的地址<code>data *preview</code>存储下一个结构体函数的地址<br><code>a</code>代表存储的数据<br><a id="more"></a></p><h3 id="创建空链表"><a href="#创建空链表" class="headerlink" title="创建空链表"></a>创建空链表</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">struct data *<span class="title">creatlist</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">data</span>* <span class="title">head</span>,*<span class="title">p1</span>,*<span class="title">p2</span>;</span></span><br><span class="line">    n=<span class="number">0</span>;</span><br><span class="line">    p1=p2=(struct data *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct data));<span class="comment">//给空间链表开辟内存</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;p1-&gt;a);<span class="comment">//读入第一个数据</span></span><br><span class="line">    <span class="keyword">while</span>(p1-&gt;a!=<span class="number">0</span>)<span class="comment">//判断数据是否为null</span></span><br><span class="line">    &#123;   n++;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">        &#123;s</span><br><span class="line">            head=p1;<span class="comment">//确立首节点地址</span></span><br><span class="line">            head-&gt;preview=<span class="literal">NULL</span>;<span class="comment">//首节点前节点为空</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;   p1=(struct data *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct data));<span class="comment">//开辟下一个内存空间</span></span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;p1-&gt;a);<span class="comment">//键入数据</span></span><br><span class="line">            p2-&gt;next=p1;<span class="comment">//完善上一个节点的链接</span></span><br><span class="line">            p1-&gt;preview=p2;<span class="comment">//完善下一个节点的链接</span></span><br><span class="line">            p2=p1;<span class="comment">//辅助变量转移</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    p1-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    end=p1-&gt;preview;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">`struct data *creatlist()`函数返回链表首节点的地址</span><br><span class="line"></span><br><span class="line">### 单项链表顺序输出</span><br><span class="line"></span><br><span class="line">```c</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printlist</span><span class="params">(struct data *g)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="class"><span class="keyword">struct</span> <span class="title">data</span> *<span class="title">p1</span> =  <span class="title">g</span>;</span> <span class="comment">//传递变量</span></span><br><span class="line">    <span class="keyword">while</span>(p1-&gt;next!=<span class="literal">NULL</span>) <span class="comment">//判断是否为尾节点</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">" %d "</span>,p1-&gt;a);</span><br><span class="line">        p1=p1-&gt;next;<span class="comment">//节点移动</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>void printlist(struct data *g)</code>按序输出链表中的每个元素</p><h3 id="双向链表逆向输出"><a href="#双向链表逆向输出" class="headerlink" title="双向链表逆向输出"></a>双向链表逆向输出</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printlistA</span><span class="params">(struct data *g)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="class"><span class="keyword">struct</span> <span class="title">data</span> *<span class="title">p1</span> =  <span class="title">g</span>;</span><span class="comment">//传递变量</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">while</span>(p1-&gt;preview!=<span class="literal">NULL</span>)<span class="comment">//判断是否为首节点</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">" %d "</span>,p1-&gt;a);<span class="comment">//输出节点内容</span></span><br><span class="line">        p1=p1-&gt;preview;<span class="comment">//节点前移</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">" %d "</span>,p1-&gt;a);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>void printlistA(struct data *g)</code>逆向输出节点的数据</p><h3 id="修改链表某一项的内容"><a href="#修改链表某一项的内容" class="headerlink" title="修改链表某一项的内容"></a>修改链表某一项的内容</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changelist</span><span class="params">(struct data *g, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="class"><span class="keyword">struct</span> <span class="title">data</span> *<span class="title">p1</span> =  <span class="title">g</span>;</span><span class="comment">//传递变量</span></span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>;<span class="comment">//定义下标</span></span><br><span class="line">    <span class="keyword">int</span> data;<span class="comment">//定义输入的内容</span></span><br><span class="line">    <span class="keyword">for</span>(i; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p1=p1-&gt;next;<span class="comment">//移动节点</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;data);<span class="comment">//输入内容</span></span><br><span class="line">    p1-&gt;a=data;<span class="comment">//修改内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>void changelist(struct data *g, int n)</code>修改链表内容函数</p><h3 id="添加链表某一项的内容"><a href="#添加链表某一项的内容" class="headerlink" title="添加链表某一项的内容"></a>添加链表某一项的内容</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addlist</span><span class="params">(struct data *g, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="class"><span class="keyword">struct</span> <span class="title">data</span> *<span class="title">p1</span> =  <span class="title">g</span>;</span><span class="comment">//传递变量</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">data</span> *<span class="title">p2</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">data</span> *<span class="title">new</span>;</span></span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="keyword">for</span>(i; i&lt;n; i++)  <span class="comment">//节点转移</span></span><br><span class="line">    &#123;</span><br><span class="line">        p1=p1-&gt;next;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    p2=p1-&gt;next;</span><br><span class="line">    <span class="keyword">new</span>=(struct data *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct data));<span class="comment">//分配空间</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;<span class="keyword">new</span>-&gt;a);</span><br><span class="line">    p1-&gt;next=<span class="keyword">new</span>;</span><br><span class="line">    <span class="keyword">new</span>-&gt;next=p2;<span class="comment">//链表连接</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="删除链表中某个数据"><a href="#删除链表中某个数据" class="headerlink" title="删除链表中某个数据"></a>删除链表中某个数据</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deletelist</span><span class="params">(struct data *g, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">data</span> *<span class="title">p1</span> =  <span class="title">g</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">data</span> *<span class="title">temp</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">data</span> *<span class="title">p2</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p1=p1-&gt;next;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    temp=p1-&gt;next;<span class="comment">//取目标链表</span></span><br><span class="line">    p2=temp-&gt;next;<span class="comment">//取目标下一个链表</span></span><br><span class="line">    p1-&gt;next=p2;<span class="comment">//链表连接</span></span><br><span class="line">    <span class="built_in">free</span>(temp);<span class="comment">//释放空间</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><h3 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h3><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">float</span> score;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">struct student* <span class="title">creatlist</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">head</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">p1</span>,*<span class="title">p2</span>;</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"please enter the %d student'name\n"</span>,i);</span><br><span class="line">gets(name);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(name,<span class="string">"0"</span>)==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">p1=(struct student *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct student));</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">head=p1;</span><br><span class="line">p1=(struct student *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct student));</span><br><span class="line">head-&gt;next=p1;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">p2-&gt;next=p1;</span><br><span class="line">p1-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">strcpy</span>( p1-&gt;name,name);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"please enter the %d student'age\n"</span>,i);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;p1-&gt;age);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"please enter the %d student'score\n"</span>,i);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%f"</span>,&amp;p1-&gt;score);</span><br><span class="line">p2=p1;</span><br><span class="line">getchar();</span><br><span class="line">i++;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showlist</span><span class="params">(struct student *head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> count=<span class="number">1</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">p</span>=<span class="title">head</span>;</span></span><br><span class="line">p= head-&gt;next;</span><br><span class="line"><span class="keyword">while</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"the %d student's name is %s \n"</span>,count,p-&gt;name);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"the %d student's age is %d\n"</span>,count,p-&gt;age);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"the %d student's score is %.2f\n"</span>,count,p-&gt;score);</span><br><span class="line">p=p-&gt;next;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addlistend</span><span class="params">(struct student *head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">p</span>,*<span class="title">p1</span>;</span></span><br><span class="line">p1=(struct student *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct student));</span><br><span class="line">p=head;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"please enter the name of student \n"</span>);</span><br><span class="line">gets(p1-&gt;name);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"please enter the age of student \n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;p1-&gt;age);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"please enter the score of student \n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%f"</span>,&amp;p1-&gt;score);</span><br><span class="line">p1-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(p-&gt;next!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">p=p-&gt;next;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">p-&gt;next=p1;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addlist</span><span class="params">(struct student *head,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">p</span>,*<span class="title">p1</span>,*<span class="title">pnext</span>;</span></span><br><span class="line">p=head;</span><br><span class="line">p=p-&gt;next;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(p-&gt;next==<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"wrong instert"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">p=p-&gt;next;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">pnext=p-&gt;next;</span><br><span class="line">p1=(struct student *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct student));</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"please enter the name of student \n"</span>);</span><br><span class="line">gets(p1-&gt;name);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"please enter the age of student \n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;p1-&gt;age);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"please enter the score of student \n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%f"</span>,&amp;p1-&gt;score);</span><br><span class="line">p1-&gt;next=pnext;</span><br><span class="line">p-&gt;next=p1;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function">struct student * <span class="title">find1</span><span class="params">(struct student *head)</span></span></span><br><span class="line"><span class="function"></span>&#123;fflush(<span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">p</span>=<span class="title">head</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">p1</span>;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"please enter the name"</span>);</span><br><span class="line"></span><br><span class="line">gets(name);</span><br><span class="line">p1=p-&gt;next;</span><br><span class="line"><span class="keyword">while</span>(p1!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;<span class="keyword">if</span>(<span class="built_in">strcmp</span>(p1-&gt;name,name)==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"> <span class="keyword">return</span>(p1); </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">p1=p1-&gt;next;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> &#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find2</span><span class="params">(struct student *head)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">fflush(<span class="built_in">stdin</span>);</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> str,result=<span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">p</span>=<span class="title">head</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">p1</span>;</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"please enter the xing"</span>);</span><br><span class="line">gets(name);</span><br><span class="line">str=<span class="built_in">strlen</span>(name);</span><br><span class="line">p1=p-&gt;next-&gt;next;</span><br><span class="line"><span class="keyword">while</span>(p1!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;str;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(name[i]!=p1-&gt;name[i]) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span>(i==str<span class="number">-1</span>)&#123;</span><br><span class="line">result++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"the purpose :%s age is %d score is %.2f \n"</span>,p1-&gt;name,p1-&gt;age,p1-&gt;score);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> &#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p1=p1-&gt;next;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(result==<span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"no answer"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> *<span class="title">head</span>,*<span class="title">purpose</span>;</span></span><br><span class="line">head=creatlist();</span><br><span class="line"><span class="comment">//showlist(head);</span></span><br><span class="line"><span class="comment">//addlistend(head);</span></span><br><span class="line">    showlist(head);</span><br><span class="line"><span class="comment">//fflush(stdin);</span></span><br><span class="line"><span class="comment">//addlist(head,2);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//purpose=find1(head);</span></span><br><span class="line">find2(head);</span><br><span class="line"><span class="comment">//showlist(head);</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"the purpose :%s age is %d score is %.2f \n"</span>,purpose-&gt;name,purpose-&gt;age,purpose-&gt;score);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="相关链贴"><a href="#相关链贴" class="headerlink" title="相关链贴"></a>相关链贴</h2><p><a href="../链表详解（二）">链表详解（二）</a><br><a href="../关于链表的学习">关于链表的学习</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Dec 11 2019 14:55:48 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;框架详解&quot;&gt;&lt;a href=&quot;#框架详解&quot; class=&quot;headerlink&quot; title=&quot;框架详解&quot;&gt;&lt;/a&gt;框架详解&lt;/h2&gt;&lt;h3 id=&quot;结构体初始化&quot;&gt;&lt;a href=&quot;#结构体初始化&quot; class=&quot;headerlink&quot; title=&quot;结构体初始化&quot;&gt;&lt;/a&gt;结构体初始化&lt;/h3&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;data&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a;&lt;span class=&quot;comment&quot;&gt;//存储数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;data&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;next&lt;/span&gt;;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;//存储下一个节点的地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;data&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;preview&lt;/span&gt;;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;//存储上一个节点的地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;初始化&lt;code&gt;data&lt;/code&gt;结构体 &lt;code&gt;data *next&lt;/code&gt;存储下一个结构体函数的地址&lt;code&gt;data *preview&lt;/code&gt;存储下一个结构体函数的地址&lt;br&gt;&lt;code&gt;a&lt;/code&gt;代表存储的数据&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://f5h8hm.coding-pages.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="c语言" scheme="http://f5h8hm.coding-pages.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/c%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="c语言" scheme="http://f5h8hm.coding-pages.com/tags/c%E8%AF%AD%E8%A8%80/"/>
    
      <category term="链表" scheme="http://f5h8hm.coding-pages.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="数据结构" scheme="http://f5h8hm.coding-pages.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>c语言结构体分析</title>
    <link href="http://f5h8hm.coding-pages.com/category/c%E8%AF%AD%E8%A8%80%E7%BB%93%E6%9E%84%E4%BD%93%E5%88%86%E6%9E%90/"/>
    <id>http://f5h8hm.coding-pages.com/category/c语言结构体分析/</id>
    <published>2019-12-02T07:34:06.000Z</published>
    <updated>2019-12-05T07:16:13.558Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 11 2019 14:55:48 GMT+0800 (GMT+08:00) --><h2 id="基本框架"><a href="#基本框架" class="headerlink" title="基本框架"></a>基本框架</h2><h3 id="代码表示"><a href="#代码表示" class="headerlink" title="代码表示"></a>代码表示</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构建结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Name</span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">100</span>];</span><br><span class="line">…………</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Name</span> <span class="title">name1</span>;</span><span class="comment">//创建单个结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Name</span> <span class="title">name2</span>[40];</span><span class="comment">//创建多个结构体【数组】</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*结构体元素调用</span></span><br><span class="line"><span class="comment">etc: name1.num</span></span><br><span class="line"><span class="comment">     name2[0].str</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//结构体元素初始化</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">strcpy</span>(name1.str,*str)</span><br><span class="line">name2[<span class="number">0</span>].num=<span class="number">0</span>;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="内存区域表示"><a href="#内存区域表示" class="headerlink" title="内存区域表示"></a>内存区域表示</h3><p><img src="/category/c语言结构体分析/结构体.png" align="center"></p><h2 id="复合结构体表示"><a href="#复合结构体表示" class="headerlink" title="复合结构体表示"></a>复合结构体表示</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">father</span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">100</span>];</span><br><span class="line">………………</span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">child</span> <span class="title">child1</span>;</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">child</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> num1;</span><br><span class="line"><span class="keyword">char</span> str1[<span class="number">100</span>];</span><br><span class="line">………………</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">father</span> <span class="title">f</span>;</span></span><br><span class="line"><span class="comment">//赋值</span></span><br><span class="line">f.chlid1.num1=<span class="number">0</span>;</span><br></pre></td></tr></table></figure><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p>学生成绩录入与筛选</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">student</span>//<span class="title">typedef</span> 定义新的数据类型</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">20</span>];<span class="comment">//学生姓名</span></span><br><span class="line"><span class="keyword">float</span> score;<span class="comment">//学生成绩</span></span><br><span class="line">&#125;student;</span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">process3</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">float</span> total=<span class="number">0</span>,avr;</span><br><span class="line">student <span class="built_in">std</span>[<span class="number">40</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"***********************\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"please enter the number of student\n"</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);<span class="comment">//输入录入学生的个数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)<span class="comment">//循环录入</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"please enter the name of %d student\n"</span>,i+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,<span class="built_in">std</span>[i].name);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"please enter the score of %d student\n"</span>,i+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%f"</span>,&amp;<span class="built_in">std</span>[i].score);</span><br><span class="line"><span class="comment">//printf("%f",std[i].score);</span></span><br><span class="line"></span><br><span class="line">total+=<span class="built_in">std</span>[i].score;<span class="comment">//计算总成绩</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">avr=total/(<span class="keyword">float</span>)n;<span class="comment">//计算平均成绩</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"the socre more than average \n"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)<span class="comment">//输出结果</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">std</span>[i].score&gt;avr) <span class="built_in">printf</span>(<span class="string">"the name is:%s socre is %.2f \n"</span>,<span class="built_in">std</span>[i].name,<span class="built_in">std</span>[i].score);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Dec 11 2019 14:55:48 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;基本框架&quot;&gt;&lt;a href=&quot;#基本框架&quot; class=&quot;headerlink&quot; title=&quot;基本框架&quot;&gt;&lt;/a&gt;基本框架&lt;/h2&gt;&lt;h3 id=&quot;代码表示&quot;&gt;&lt;a href=&quot;#代码表示&quot; class=&quot;headerlink&quot; title=&quot;代码表示&quot;&gt;&lt;/a&gt;代码表示&lt;/h3&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//构建结构体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Name&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; num;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; str[&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;…………&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//创建结构体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;name1&lt;/span&gt;;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;//创建单个结构体&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;name2&lt;/span&gt;[40];&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;//创建多个结构体【数组】&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*结构体元素调用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;etc: name1.num&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;     name2[0].str&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;*/&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//结构体元素初始化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;strcpy&lt;/span&gt;(name1.str,*str)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;name2[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].num=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="c语言" scheme="http://f5h8hm.coding-pages.com/categories/c%E8%AF%AD%E8%A8%80/"/>
    
      <category term="结构体" scheme="http://f5h8hm.coding-pages.com/categories/c%E8%AF%AD%E8%A8%80/%E7%BB%93%E6%9E%84%E4%BD%93/"/>
    
    
      <category term="c语言" scheme="http://f5h8hm.coding-pages.com/tags/c%E8%AF%AD%E8%A8%80/"/>
    
      <category term="结构体" scheme="http://f5h8hm.coding-pages.com/tags/%E7%BB%93%E6%9E%84%E4%BD%93/"/>
    
      <category term="oo" scheme="http://f5h8hm.coding-pages.com/tags/oo/"/>
    
  </entry>
  
  <entry>
    <title>关于全排列与深度搜索的分析</title>
    <link href="http://f5h8hm.coding-pages.com/category/%E5%85%B3%E4%BA%8E%E5%85%A8%E6%8E%92%E5%88%97%E4%B8%8E%E6%B7%B1%E5%BA%A6%E6%90%9C%E7%B4%A2%E7%9A%84%E5%88%86%E6%9E%90/"/>
    <id>http://f5h8hm.coding-pages.com/category/关于全排列与深度搜索的分析/</id>
    <published>2019-11-26T09:12:50.000Z</published>
    <updated>2019-11-27T04:57:23.694Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 11 2019 14:55:48 GMT+0800 (GMT+08:00) --><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>全排列的生成算法方法是将给定的序列中所有可能的全排列无重复无遗漏地枚举出来。此处全排列的定义是：从n个元素中取出m个元素进行排列，当n=m时这个排列被称为全排列。</p><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p>input:初始数值1,2,3</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">output:</span><br><span class="line">[1,2,3]</span><br><span class="line">[1,3,2]</span><br><span class="line">[2,1,3]</span><br><span class="line">[2,3,1]</span><br><span class="line">[3,1,2]</span><br><span class="line">[3,2,1]</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><p>交换法，</p><div style="witdh:100%;heigh:100px"><img src="/category/关于全排列与深度搜索的分析/交换法.png" align="center" style="height:200px"></div>选择插入法<div style="witdh:100%;heigh:100px"><img src="/category/关于全排列与深度搜索的分析/插入法.png" align="center" style="height:200px"></div><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sweap</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="keyword">int</span> t;</span><br><span class="line">    t=*a;</span><br><span class="line">    *a=*b;</span><br><span class="line">    *b=t;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">list</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> min,<span class="keyword">int</span> max)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(min==max<span class="number">-1</span>)<span class="comment">//递归到最后一项无需交换直接输出</span></span><br><span class="line">    &#123;   <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;max; i++)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>,a[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=min; i&lt;max; i++)<span class="comment">//次次与后面的项进行交换</span></span><br><span class="line">        &#123;</span><br><span class="line">            sweap(&amp;a[i],&amp;a[min]);</span><br><span class="line">            <span class="built_in">list</span>(a,min+<span class="number">1</span>,max);</span><br><span class="line">            sweap(&amp;a[i],&amp;a[min]);<span class="comment">//递归完成退栈还原</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> *b,<span class="keyword">int</span> cur,<span class="keyword">int</span> max)</span><span class="comment">//从b[]遍历选择a[]中第cur位的数字 </span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> mark=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(cur==max)<span class="comment">//插入到最后一项无需插入</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;max; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>,a[i]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;max; i++)<span class="comment">//遍历b[]每一项数字</span></span><br><span class="line">&#123;</span><br><span class="line">mark=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;cur; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(b[i]==a[j])<span class="comment">//去重</span></span><br><span class="line">&#123;</span><br><span class="line">mark=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(mark==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">a[cur]=b[i];</span><br><span class="line">pre(a,b,cur+<span class="number">1</span>,max);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Dec 11 2019 14:55:48 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;全排列的生成算法方法是将给定的序列中所有可能的全排列无重复无遗漏地枚举出来。此处全排列的定义是：从n个元素中取出m个元素进行排列，当n=m时这个排列被称为全排列。&lt;/p&gt;&lt;h2 id=&quot;举例&quot;&gt;&lt;a href=&quot;#举例&quot; class=&quot;headerlink&quot; title=&quot;举例&quot;&gt;&lt;/a&gt;举例&lt;/h2&gt;&lt;p&gt;input:初始数值1,2,3&lt;/p&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;output:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[1,2,3]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[1,3,2]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[2,1,3]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[2,3,1]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[3,1,2]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[3,2,1]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="算法" scheme="http://f5h8hm.coding-pages.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="c语言" scheme="http://f5h8hm.coding-pages.com/categories/%E7%AE%97%E6%B3%95/c%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="全排列" scheme="http://f5h8hm.coding-pages.com/tags/%E5%85%A8%E6%8E%92%E5%88%97/"/>
    
      <category term="递归" scheme="http://f5h8hm.coding-pages.com/tags/%E9%80%92%E5%BD%92/"/>
    
      <category term="深度搜索" scheme="http://f5h8hm.coding-pages.com/tags/%E6%B7%B1%E5%BA%A6%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>递归的学习</title>
    <link href="http://f5h8hm.coding-pages.com/category/%E9%80%92%E5%BD%92%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <id>http://f5h8hm.coding-pages.com/category/递归的学习/</id>
    <published>2019-11-24T08:42:07.000Z</published>
    <updated>2019-12-02T07:22:54.260Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 11 2019 14:55:48 GMT+0800 (GMT+08:00) --><h2 id="关于递归的初步原理"><a href="#关于递归的初步原理" class="headerlink" title="关于递归的初步原理"></a>关于递归的初步原理</h2><p>程序自己家调用自己的过程叫做递归</p><h3 id="流程图演示"><a href="#流程图演示" class="headerlink" title="流程图演示"></a>流程图演示</h3><div style="witdh:100%;heigh:100px"><img src="/category/递归的学习/流程图.png" align="center" style="height:200px"></div><a id="more"></a> ### 基础代码实现<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  fun(a);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align="center"><b>tip:此处递归没有加入结束条件为死循环递归法</b></div><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><h3 id="斐波拉契数列"><a href="#斐波拉契数列" class="headerlink" title="斐波拉契数列"></a>斐波拉契数列</h3><script type="math/tex;mode=display">f(n) = f(n-1)+f(n-2)</script><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="keyword">if</span>(n==<span class="number">1</span>||n==<span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">//斐波拉契数列初始化前两项的额值为2</span></span><br><span class="line"><span class="keyword">return</span> fibonacci(n<span class="number">-1</span>)+fibonacci(n<span class="number">-2</span>);<span class="comment">//前两项相加和作为下一项</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="猴子吃桃问题解析"><a href="#猴子吃桃问题解析" class="headerlink" title="猴子吃桃问题解析"></a>猴子吃桃问题解析</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">monkeyproblem</span><span class="params">(<span class="keyword">int</span> day)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> sum=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(day==<span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,sum);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">sum=(sum+<span class="number">1</span>)*<span class="number">2</span>;</span><br><span class="line">f(day<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内存分析"><a href="#内存分析" class="headerlink" title="内存分析"></a>内存分析</h2><p><img src="/category/递归的学习/捕获.PNG" align="center"><br><img src="/category/递归的学习/1659194-2bd21d18c30c6d84.webp" align="center"><br>Tip: <code>0x00401507 &lt;+7&gt;: cmp DWORD PTR [ebp+0x8],0x1</code>为斐波拉契数列中的比较输入值与输出值的部分<br><code>0x0040151a &lt;+26&gt;: mov eax,DWORD PTR [ebp+0x8]</code>为不满足时的返回部分</p><h2 id="关于非递归法的堆栈表示法"><a href="#关于非递归法的堆栈表示法" class="headerlink" title="关于非递归法的堆栈表示法"></a>关于非递归法的堆栈表示法</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">nfact</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res;</span><br><span class="line">PSeqStack sd;</span><br><span class="line">st=createEmptyStack_seq();</span><br><span class="line"><span class="keyword">while</span>(n&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">push_seq(st,n);</span><br><span class="line">n=n<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!isEmptyStack_seq(st))</span><br><span class="line">&#123;</span><br><span class="line">res=res*top-seq(st);</span><br><span class="line">pop_seq(st);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">free</span>(st);</span><br><span class="line"><span class="keyword">return</span>(res);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Dec 11 2019 14:55:48 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;关于递归的初步原理&quot;&gt;&lt;a href=&quot;#关于递归的初步原理&quot; class=&quot;headerlink&quot; title=&quot;关于递归的初步原理&quot;&gt;&lt;/a&gt;关于递归的初步原理&lt;/h2&gt;&lt;p&gt;程序自己家调用自己的过程叫做递归&lt;/p&gt;&lt;h3 id=&quot;流程图演示&quot;&gt;&lt;a href=&quot;#流程图演示&quot; class=&quot;headerlink&quot; title=&quot;流程图演示&quot;&gt;&lt;/a&gt;流程图演示&lt;/h3&gt;&lt;div style=&quot;witdh:100%;heigh:100px&quot;&gt;&lt;img src=&quot;/category/递归的学习/流程图.png&quot; align=&quot;center&quot; style=&quot;height:200px&quot;&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="c语言" scheme="http://f5h8hm.coding-pages.com/tags/c%E8%AF%AD%E8%A8%80/"/>
    
      <category term="递归" scheme="http://f5h8hm.coding-pages.com/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>数组排序</title>
    <link href="http://f5h8hm.coding-pages.com/category/%E6%95%B0%E7%BB%84%E6%8E%92%E5%BA%8F/"/>
    <id>http://f5h8hm.coding-pages.com/category/数组排序/</id>
    <published>2019-11-10T06:45:29.000Z</published>
    <updated>2019-12-11T06:54:59.793Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 11 2019 14:55:48 GMT+0800 (GMT+08:00) --><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><h3 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h3><p><img src="/category/数组排序/冒泡排序.gif" alt="冒泡原理图" align="center"></p><h3 id="代码实现方法"><a href="#代码实现方法" class="headerlink" title="代码实现方法"></a>代码实现方法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdiol.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">100</span>],temp; <span class="comment">//初始化大小为100的数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">100</span>-i;j++)</span><br><span class="line">        &#123;   <span class="keyword">if</span>(a[j]&gt;a[j+<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                temp=[j];</span><br><span class="line">                a[j]=a[j+<span class="number">1</span>];</span><br><span class="line">                a[j+<span class="number">1</span>]=temp;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>}</p><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><h3 id="原理图-1"><a href="#原理图-1" class="headerlink" title="原理图"></a>原理图</h3><p><img src="/category/数组排序/插入排序.gif" alt="冒泡原理图" align="center"></p><h3 id="代码实现方法-1"><a href="#代码实现方法-1" class="headerlink" title="代码实现方法"></a>代码实现方法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdiol.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">100</span>],temp; <span class="comment">//初始化大小为100的数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">100</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i-i;j&gt;=<span class="number">0</span>;j--)</span><br><span class="line">        &#123;   <span class="keyword">if</span>(a[j]&gt;a[j+<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                temp=[j];</span><br><span class="line">                a[j]=a[j+<span class="number">1</span>];</span><br><span class="line">                a[j+<span class="number">1</span>]=temp;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed Dec 11 2019 14:55:48 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;冒泡排序&quot;&gt;&lt;a href=&quot;#冒泡排序&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序&quot;&gt;&lt;/a&gt;冒泡排序&lt;/h2&gt;
      
    
    </summary>
    
      <category term="c语言" scheme="http://f5h8hm.coding-pages.com/categories/c%E8%AF%AD%E8%A8%80/"/>
    
      <category term="算法" scheme="http://f5h8hm.coding-pages.com/categories/c%E8%AF%AD%E8%A8%80/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="c语言" scheme="http://f5h8hm.coding-pages.com/tags/c%E8%AF%AD%E8%A8%80/"/>
    
      <category term="排序" scheme="http://f5h8hm.coding-pages.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="冒泡" scheme="http://f5h8hm.coding-pages.com/tags/%E5%86%92%E6%B3%A1/"/>
    
  </entry>
  
  <entry>
    <title>for循环详解</title>
    <link href="http://f5h8hm.coding-pages.com/category/for%E5%BE%AA%E7%8E%AF%E8%AF%A6%E8%A7%A3/"/>
    <id>http://f5h8hm.coding-pages.com/category/for循环详解/</id>
    <published>2019-10-13T07:33:06.000Z</published>
    <updated>2019-12-04T07:27:16.948Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 11 2019 14:55:48 GMT+0800 (GMT+08:00) --><h3 id="for循环框架"><a href="#for循环框架" class="headerlink" title="for循环框架"></a>for循环框架</h3><p><code>for(expectation 1;expecatation 2;expectation 3)</code>为其基本框架<br></p><h3 id="流程原理"><a href="#流程原理" class="headerlink" title="流程原理"></a>流程原理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">flowchat</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">st=&gt;start:开始;</span><br><span class="line">op=&gt;operation: for(expectation 1;expecatation 2;expectation 3);</span><br><span class="line">op1=&gt;operation: expectation 1;</span><br><span class="line">op3=&gt;operation: others;</span><br><span class="line">op2=&gt;operation: expectation 3;</span><br><span class="line"></span><br><span class="line">co-&gt;condition: expecatation 2 is true?;</span><br><span class="line"></span><br><span class="line">op1=operation:</span><br><span class="line">ed-&gt;end:结束;</span><br><span class="line">st-&gt;op-&gt;op1-&gt;co;</span><br><span class="line">co(yes)-&gt;op3-&gt;op2-&gt;co;</span><br><span class="line">co(no)-&gt;ed;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Wed Dec 11 2019 14:55:48 GMT+0800 (GMT+08:00) --&gt;&lt;h3 id=&quot;for循环框架&quot;&gt;&lt;a href=&quot;#for循环框架&quot; class=&quot;headerlink&quot; title=&quot;for循环框架&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="c语言，函数" scheme="http://f5h8hm.coding-pages.com/categories/c%E8%AF%AD%E8%A8%80%EF%BC%8C%E5%87%BD%E6%95%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>b站测试</title>
    <link href="http://f5h8hm.coding-pages.com/category/b%E7%AB%99%E6%B5%8B%E8%AF%95/"/>
    <id>http://f5h8hm.coding-pages.com/category/b站测试/</id>
    <published>2019-08-26T08:10:54.000Z</published>
    <updated>2019-11-27T03:38:51.349Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 11 2019 14:55:48 GMT+0800 (GMT+08:00) --><p><iframe src="//player.bilibili.com/player.html?aid=34336721&cid=:60148621&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen width="100%" height="450"></iframe><br><a id="more"></a></p><p>coding:<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe src=<span class="string">"//player.bilibili.com/player.html?aid=34336721&amp;cid=:60148621&amp;page=1"</span> scrolling=<span class="string">"no"</span> border=<span class="string">"0"</span> frameborder=<span class="string">"no"</span> framespacing=<span class="string">"0"</span> allowfullscreen=<span class="string">"true"</span> width=100% height=450&gt; &lt;/iframe&gt;</span><br></pre></td></tr></table></figure><p></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Dec 11 2019 14:55:48 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;iframe src=&quot;//player.bilibili.com/player.html?aid=34336721&amp;cid=:60148621&amp;page=1&quot; scrolling=&quot;no&quot; border=&quot;0&quot; frameborder=&quot;no&quot; framespacing=&quot;0&quot; allowfullscreen width=&quot;100%&quot; height=&quot;450&quot;&gt;&lt;/iframe&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="测试" scheme="http://f5h8hm.coding-pages.com/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="测试" scheme="http://f5h8hm.coding-pages.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
      <category term="框架" scheme="http://f5h8hm.coding-pages.com/tags/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="补番" scheme="http://f5h8hm.coding-pages.com/tags/%E8%A1%A5%E7%95%AA/"/>
    
  </entry>
  
  <entry>
    <title>Blog Web update</title>
    <link href="http://f5h8hm.coding-pages.com/category/Blog-Web-update/"/>
    <id>http://f5h8hm.coding-pages.com/category/Blog-Web-update/</id>
    <published>2019-08-14T11:59:58.000Z</published>
    <updated>2019-08-26T02:59:58.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 11 2019 14:55:48 GMT+0800 (GMT+08:00) --><h2 id="creat-musicpalyer"><a href="#creat-musicpalyer" class="headerlink" title="creat musicpalyer"></a>creat musicpalyer</h2><p>source:NetEase Cloud Music.</p><a id="more"></a><hr><p><span id="inline-blue">评论组件</span></p><p>source:Livere</p><hr><h2 id="delete-blank-link"><a href="#delete-blank-link" class="headerlink" title="delete blank link"></a>delete blank link</h2><p><span id="inline-blue">delete blank link</span></p><hr><h2 id="add-SEO"><a href="#add-SEO" class="headerlink" title="add SEO"></a>add SEO</h2><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Dec 11 2019 14:55:48 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;creat-musicpalyer&quot;&gt;&lt;a href=&quot;#creat-musicpalyer&quot; class=&quot;headerlink&quot; title=&quot;creat musicpalyer&quot;&gt;&lt;/a&gt;creat musicpalyer&lt;/h2&gt;&lt;p&gt;source:NetEase Cloud Music.&lt;/p&gt;
    
    </summary>
    
      <category term="框架更新" scheme="http://f5h8hm.coding-pages.com/categories/%E6%A1%86%E6%9E%B6%E6%9B%B4%E6%96%B0/"/>
    
    
      <category term="更新" scheme="http://f5h8hm.coding-pages.com/tags/%E6%9B%B4%E6%96%B0/"/>
    
      <category term="维护" scheme="http://f5h8hm.coding-pages.com/tags/%E7%BB%B4%E6%8A%A4/"/>
    
      <category term="主题" scheme="http://f5h8hm.coding-pages.com/tags/%E4%B8%BB%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>my new blog1 test</title>
    <link href="http://f5h8hm.coding-pages.com/category/my-new-blog1-test/"/>
    <id>http://f5h8hm.coding-pages.com/category/my-new-blog1-test/</id>
    <published>2019-08-14T03:39:47.000Z</published>
    <updated>2019-08-26T02:19:54.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 11 2019 14:55:48 GMT+0800 (GMT+08:00) --><h2 id="the-first-new"><a href="#the-first-new" class="headerlink" title="the first new"></a>the first new</h2><p>1.creat a new blog test text at local mechine<br>2.creat this text(.md)<br>3.start at local mechine<br><a id="more"></a></p><hr><h2 id="polish-the-style"><a href="#polish-the-style" class="headerlink" title="polish the style"></a>polish the style</h2><p>site: <a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="noopener">https://github.com/litten/hexo-theme-yilia</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Dec 11 2019 14:55:48 GMT+0800 (GMT+08:00) --&gt;&lt;h2 id=&quot;the-first-new&quot;&gt;&lt;a href=&quot;#the-first-new&quot; class=&quot;headerlink&quot; title=&quot;the first new&quot;&gt;&lt;/a&gt;the first new&lt;/h2&gt;&lt;p&gt;1.creat a new blog test text at local mechine&lt;br&gt;2.creat this text(.md)&lt;br&gt;3.start at local mechine&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>关于链表的学习</title>
    <link href="http://f5h8hm.coding-pages.com/category/%E5%85%B3%E4%BA%8E%E9%93%BE%E8%A1%A8%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <id>http://f5h8hm.coding-pages.com/category/关于链表的学习/</id>
    <published>2019-08-14T03:39:47.000Z</published>
    <updated>2019-12-02T07:33:31.251Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Wed Dec 11 2019 14:55:48 GMT+0800 (GMT+08:00) --><h3 id="关于链表的简介"><a href="#关于链表的简介" class="headerlink" title="关于链表的简介"></a>关于链表的简介</h3><p>链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。链表由一系列结点（链表中每一个元素称为结点）组成，结点可以在运行时动态生成。每个结点包括两个部分：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域。 相比于线性表顺序结构，操作复杂。由于不必须按顺序存储，链表在插入的时候可以达到O(1)的复杂度，比另一种线性表顺序表快得多，但是查找一个节点或者访问特定编号的节点则需要O(n)的时间，而线性表和顺序表相应的时间复杂度分别是O(logn)和O(1)。</p><h2 id="链表基础框架"><a href="#链表基础框架" class="headerlink" title="链表基础框架"></a>链表基础框架</h2><a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> n=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">data</span> *<span class="title">next</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">data</span> *<span class="title">preview</span>;</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span> *<span class="title">end</span>;</span></span><br><span class="line"><span class="function">struct data *<span class="title">creatlist</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printlist</span><span class="params">(struct data *g)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printAdress</span><span class="params">(struct data *g)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printlistA</span><span class="params">(struct data *g)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changelist</span><span class="params">(struct data *g, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addlist</span><span class="params">(struct data *g, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deletelist</span><span class="params">(struct data *g, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="class"><span class="keyword">struct</span> <span class="title">data</span>  *<span class="title">head</span>;</span></span><br><span class="line">    head=creatlist();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%p \n"</span>,head);</span><br><span class="line">    printlist(head);</span><br><span class="line">    printlistA(end);</span><br><span class="line">    changelist(head,<span class="number">3</span>);</span><br><span class="line">    printlist(head);</span><br><span class="line">    addlist(head,<span class="number">3</span>);</span><br><span class="line">    printlist(head);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    deletelist(head,<span class="number">2</span>);</span><br><span class="line">    printlist(head);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    printAdress(head);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">struct data *<span class="title">creatlist</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">data</span>* <span class="title">head</span>,*<span class="title">p1</span>,*<span class="title">p2</span>;</span></span><br><span class="line">    n=<span class="number">0</span>;</span><br><span class="line">    p1=p2=(struct data *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct data));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;p1-&gt;a);</span><br><span class="line">    <span class="keyword">while</span>(p1-&gt;a!=<span class="number">0</span>)</span><br><span class="line">    &#123;   n++;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            head=p1;</span><br><span class="line">            head-&gt;preview=<span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;   p1=(struct data *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct data));</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;p1-&gt;a);</span><br><span class="line">            p2-&gt;next=p1;</span><br><span class="line">            p1-&gt;preview=p2;</span><br><span class="line">            p2=p1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    p1-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">    end=p1-&gt;preview;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printlist</span><span class="params">(struct data *g)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="class"><span class="keyword">struct</span> <span class="title">data</span> *<span class="title">p1</span> =  <span class="title">g</span>;</span></span><br><span class="line">    <span class="keyword">while</span>(p1-&gt;next!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">" %d "</span>,p1-&gt;a);</span><br><span class="line">        p1=p1-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printlistA</span><span class="params">(struct data *g)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="class"><span class="keyword">struct</span> <span class="title">data</span> *<span class="title">p1</span> =  <span class="title">g</span>;</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">while</span>(p1-&gt;preview!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">" %d "</span>,p1-&gt;a);</span><br><span class="line">        p1=p1-&gt;preview;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">" %d "</span>,p1-&gt;a);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printAdress</span><span class="params">(struct data *g)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="class"><span class="keyword">struct</span> <span class="title">data</span> *<span class="title">p1</span> =  <span class="title">g</span>;</span></span><br><span class="line">    <span class="keyword">while</span>(p1-&gt;next!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">" %p "</span>,&amp;p1);</span><br><span class="line">        p1=p1-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changelist</span><span class="params">(struct data *g, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="class"><span class="keyword">struct</span> <span class="title">data</span> *<span class="title">p1</span> =  <span class="title">g</span>;</span></span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="keyword">for</span>(i; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p1=p1-&gt;next;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;data);</span><br><span class="line">    p1-&gt;a=data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addlist</span><span class="params">(struct data *g, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;   <span class="class"><span class="keyword">struct</span> <span class="title">data</span> *<span class="title">p1</span> =  <span class="title">g</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">data</span> *<span class="title">p2</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">data</span> *<span class="title">new</span>;</span></span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    <span class="keyword">for</span>(i; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p1=p1-&gt;next;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    p2=p1-&gt;next;</span><br><span class="line">    <span class="keyword">new</span>=(struct data *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct data));</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;<span class="keyword">new</span>-&gt;a);</span><br><span class="line">    p1-&gt;next=<span class="keyword">new</span>;</span><br><span class="line">    <span class="keyword">new</span>-&gt;next=p2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deletelist</span><span class="params">(struct data *g, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">data</span> *<span class="title">p1</span> =  <span class="title">g</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">data</span> *<span class="title">temp</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">data</span> *<span class="title">p2</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        p1=p1-&gt;next;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    temp=p1-&gt;next;</span><br><span class="line">    p2=temp-&gt;next;</span><br><span class="line">    p1-&gt;next=p2;</span><br><span class="line">    <span class="built_in">free</span>(temp);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="更多详情"><a href="#更多详情" class="headerlink" title="更多详情"></a>更多详情</h2><p><a href="../链表详解">链表详解</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Wed Dec 11 2019 14:55:48 GMT+0800 (GMT+08:00) --&gt;&lt;h3 id=&quot;关于链表的简介&quot;&gt;&lt;a href=&quot;#关于链表的简介&quot; class=&quot;headerlink&quot; title=&quot;关于链表的简介&quot;&gt;&lt;/a&gt;关于链表的简介&lt;/h3&gt;&lt;p&gt;链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。链表由一系列结点（链表中每一个元素称为结点）组成，结点可以在运行时动态生成。每个结点包括两个部分：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域。 相比于线性表顺序结构，操作复杂。由于不必须按顺序存储，链表在插入的时候可以达到O(1)的复杂度，比另一种线性表顺序表快得多，但是查找一个节点或者访问特定编号的节点则需要O(n)的时间，而线性表和顺序表相应的时间复杂度分别是O(logn)和O(1)。&lt;/p&gt;&lt;h2 id=&quot;链表基础框架&quot;&gt;&lt;a href=&quot;#链表基础框架&quot; class=&quot;headerlink&quot; title=&quot;链表基础框架&quot;&gt;&lt;/a&gt;链表基础框架&lt;/h2&gt;
    
    </summary>
    
      <category term="c语言" scheme="http://f5h8hm.coding-pages.com/categories/c%E8%AF%AD%E8%A8%80/"/>
    
      <category term="算法" scheme="http://f5h8hm.coding-pages.com/categories/c%E8%AF%AD%E8%A8%80/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="c语言" scheme="http://f5h8hm.coding-pages.com/tags/c%E8%AF%AD%E8%A8%80/"/>
    
      <category term="链表" scheme="http://f5h8hm.coding-pages.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="数据结构" scheme="http://f5h8hm.coding-pages.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
</feed>
